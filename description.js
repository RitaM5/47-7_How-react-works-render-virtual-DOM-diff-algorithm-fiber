/*
1.Render:-

সাধারণভাবে আমরা এইচটিএমএল ফাইল এর মাধ্যমে যে ওয়েবসাইট গুলো তৈরি করে থাকি সেইখানে কোন একটা জিনিস চেঞ্জ করলে পুরাটা পেজকে একদম প্রথম থেকে শেষ পর্যন্ত নতুন করে প্রিন্ট করে। এইযে এইচটিএমএল কোড থেকে ব্রাউজার ডম ব্যবহার করে ইউএইতে পুরাটা ফাইল প্রিন্ট করছে এটাকে বলা হয় রেন্ডার।(aituk obdhi main)
রেন্ডারিং করার কাজটা মূলত করে ব্রাউজার। ব্রাউজার সেটা এইচটিএমএল থেকে করতে পারে অথবা জাভাস্ক্রিপ্ট থেকে করতে পারে।

JSX থেকে ব্রাউজার সরাসরি রেন্ডারিং করে না। 

আমরা JSX এর ভিতর যে কোডগুলা করছে সেটা রিয়েক্ট জাভাস্ক্রিপ্ট অবজেক্ট এ রুপান্তর করে। এবং পরবর্তীতে সেটা ব্রাউজারে রেন্ডারিং হয়*/

/*
2.How react works:-

*/

/*
Babel:-
JSX এর ভিতর আমরা যে এইচটিএমএল এর মত কোড গুলো লিখছি সেগুলো আসলে এইচটিএমএল কোড না।

আমরা যেমন ফাংশন দিয়ে ম্যানুয়ালি কেক বানাতে পারি রিয়েক্ট ডেভলপাররা এইচটিএমএল এর মত করে ট্যাগ গুলাকে বানিয়েছে।
যখন আমরা রিয়েক্ট ডেভলপারের তৈরি করা ট্যাগ গুলো ব্যবহার করি যেগুলো দেখতে এইচটিএমএল ট্যাগ এর মত, 

বেবেল কম্পাইলার সে গুলোকে কম্পাইল করে জাভাস্ক্রিপ্ট অবজেক্টে রূপান্তর করে। এরপরে সেগুলা রেন্ডার করা হয়
*/

/*
3.Virtual DOM:-

Documents Object Model এই জিনিসটা ব্রাউজার ব্যবহার করে। আমরা যখন এইচটিএমএল কোড লিখি সেই কোডটা যখন ব্রাউজার রিট করে তখন তার DOM তৈরি করে এবং সেটা রেন্ডার করে।

কোন একটা ইলিমেন্ট আমরা চেঞ্জ করলে পুনরায় নতুন করে এই পুরোটা কাজ করতে হয়।

পারফরম্যান্স উন্নতি করার জন্য পুরাটা পেইজ নতুন করে  পৃন্ট না করে শুধুমাত্র সেই জায়গাটা পরিবর্তন হয়েছে সে জায়গাটা করা বেশি ভালো।

তো এটা কিভাবে করা যেতে পারে.? যেই এলিমেন্ট এর ডাটা চেঞ্জ করা হয়েছে সেই ইলিমেন্ট পুরোটা পেজ থেকে খুঁজে বের করতে হবে এবং সেটাকে প্রিন্ট করতে হবে। ব্যাপারটা এমন যে একটা বইয়ের সূচিপত্র থেকে দেখে দেখে আমরা ওই টপিকটা খুজে বের করব। এইটার পারফরম্যান্সও খুব বেশি ভালো না। রিয়েক্ট এই জায়গাটাতে virtual dom ইউজ করে।

virtual dom হল একটা ফেক dom. এটা UI তে প্রিন্ট করা থাকে না। এটা একটা সফট ডকুমেন্টের মত। যেমন ধরেন একটা অনলাইন পিডিএফ। তো একটা অনলাইন পিডিএফ থেকে খুব সহজে আমরা যে কোন একটা ওয়ার্ড খুঁজে বের করতে পারি।

রিয়েক্ট ঠিক এই কাজটাই করে। যখন আমরা কোনো কিছু চেঞ্জ করে সেটাকে রান করি, রিয়েক্ট সরাসরি ইউএইতে থাকা dom এরমধ্যে ওই এলিমেন্ট তাকে খোঁজে না। বরং virtual dom এর মধ্যে ওই এলিমেন্ট কে খুঁজে বের করে যেটা অনেক তাড়াতাড়ি হয়। 

UI তে থাকা অরিজিনাল ডম এবং ভার্চুয়াল dom একই রকমের থাকে। তাই ভার্চুয়াল dom এর মধ্যে ওই এলিমেন্টের জায়গাটা খুঁজে বের করার পরে ইউএইতে খুব দ্রুত সেটা চেঞ্জ করে শুধুমাত্র ওই জায়গাটা রেন্ডার করে দেয়।
*/

/*
4.React diff algorithm:-

এই অ্যালগরিদম টা ব্যবহার করা হয় ইউ আই এর মধ্যে থাকা ডোমের এলিমেন্ট কে চেঞ্জ করার জন্য। Virtual DOM update করার পরে ইউএইতে থাকা অরিজিনাল DOM এবং virtual DOM এর কম্পেয়ার করা হয়। কম্পেয়ার করলেই বুঝা যায় কোন জায়গা গুলোতে সিমিলার হচ্ছে না। যেই জায়গায়  সিমিলার হচ্ছে না সেগুলা virtual DOM থেকে নিয়ে অরিজিনাল DOM আপডেট করে UI রেন্ডার করে দেয়।
*/

/*
5.React fiber:-

রিয়েক্ট ফাইবার হল একটা ইঞ্জিন যেটার ভিতর এই  react diff algorithm run করা হয়। Original Dom and  virtual Dom এর কোন জায়গাটা সিমিলার না এইটা রিএকটিভ অ্যালগরিদম এর মাধ্যমে রিয়েক্ট ফাইবার দিয়ে বের করা হয়।
*/

//6. dependency:-
/* useEffect() এই ফাংশনটা সেকেন্ড প্যারামিটার হল ডিপেন্ডেন্সি.

ডিপেন্ডেন্সি বলতে বোঝায় কিসের উপর ভিত্তি করে এই ফাংশন টা চলবে.

যখন আমরা একটা এমপিয়ারে দিয়ে দিচ্ছি এটার মানে হল যখন পেজ লোড হবে এটা শুধুমাত্র একবার চলবে.

কিন্তু এইটার দ্বিতীয় যে প্যারামিটার অর্থাৎ ডিপেন্ডেন্সি প্যারামিটার তা যদি আমরা এম্পটি না দিয়ে অন্য কিছু দেই, 
তাহলে আমরা যেই জিনিসটা দিচ্ছি ওইটা যখনই পরিবর্তন হবে এই ফাংশনটা পুনরায় কল হবে.

যেমন আমরা এখানে প্রোডাক্ট দিয়েছি। এটার মানে হল যখন পেজ লোড হবে তখন এ ফাংশন টা একবার কল হবে, 

পরবর্তীতে যখনই প্রোডাক্ট এরে এর কোনো পরিবর্তন হবে এ ফাংশন টা পুনরায় কল হবে। 

অর্থাৎ আমরা নতুন কোন প্রোডাক্ট এড করলে প্রোডাক্ট এর এর পরিবর্তন হবে এবং এই ফাংশনটা কল হবে.

শুধুমাত্র ডিপেন্ডেন্সি এরে এর ভিতর যেই যেই জিনিস দেওয়া হবে ঐ গুলার পরিবর্তন হইলে এই ফাংশনটা পুনরায় কল হবে

*/